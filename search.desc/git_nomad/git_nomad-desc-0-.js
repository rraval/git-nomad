searchState.loadedDescShard("git_nomad", 0, "Use <code>clap</code> to define the intended command line interface.\nUse <code>clap</code> to implement the intended command line interface.\nSee <code>GitBinary</code> for the primary entry point.\nSee <code>GitRef</code> for the primary entry point.\nExtract user arguments in order of preference:\nThe <code>GitBinary</code> intended by the user via the CLI.\nThe <code>Verbosity</code> intended by the user via the CLI.\nThe nomad workflow the user intends to execute via the CLI.\nHelpers for executing <code>Command</code>s and parsing their <code>Output</code>.\nHigh level user invoked workflows for nomad.\nImplements repository manipulations by delegating to some …\nUtility to parse line based output of various <code>git</code> …\nThe command produced two or more lines.\nThe command produced exactly one line.\nThe command produced no lines.\nInvoke a git sub-command with an explicit <code>--git-dir</code> to …\nGet the current branch, which may fail if the work tree is …\nDelete a ref from the repository.\nFetch all nomad managed refs from a given remote.\nWraps <code>git fetch</code> to fetch refs from a given remote into the …\nReturns the argument unchanged.\nParse a <code>LineArity</code> from an arbitrary line.\nReturns the argument unchanged.\nWraps <code>git config</code> to read a single namespaced value.\nRun the git binary inheriting the same environment that …\nThe absolute path to the <code>.git</code> directory of the repository.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShould higher level commands be producing output, or has …\nList all nomad managed refs from a given remote.\nList all the non-HEAD refs in the repository as <code>GitRef</code>s.\nWraps <code>git ls-remote</code> to query a remote for all refs that …\nThe name of the <code>git</code> binary to use. Implemented on top of …\nContainerizes all the naming schemes used by nomad from …\nCreate a new <code>GitBinary</code> by finding the <code>.git</code> dir relative to …\nThe caller expects the output to only have a single line.\nDelete the given nomad managed refs.\nPush local branches to nomad managed refs in the remote.\nWraps <code>git push</code> to push refs from the local repository into …\nBuild a point in time snapshot for all refs that nomad …\nUsed to actually execute commands while reporting progress …\nThe caller expects the output to have zero or one line.\nThe main name that we declare to be ours and nobody elses. …\nWhere information is stored for <code>git config</code>.\nThe refspec to fetch remote nomad managed refs as local …\nThe refspec to list remote nomad managed refs.\nThe refspec to push local branches as nomad managed refs …\nInformation about a specific ref in a git repository, …\nAll the ways a <code>git show-ref</code> line can fail to parse.\nThe hash representing the git commit ID that the ref …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe full ref name, like <code>refs/heads/master</code>.\nUtility to parse a <code>&lt;ref_name&gt;&lt;delimiter&gt;&lt;commit_id&gt;</code> line …\nParse a single line from <code>git ls-remote</code> as a <code>GitRef</code>.\nParse a single line from <code>git show-ref</code> as a <code>GitRef</code>.\nAdds a newline to separate output from spinners, but that…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescribes where a ref should be removed from.\nA point in time view of refs we care about. <code>Snapshot</code> is …\nForce all callers to go through <code>Snapshot::new</code> which can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe active branches in this clone that the user …\nSmart constructor that enforces the “scoped under a …\nThe refs that nomad manages to follow the local branches.\nReturn all nomad branches for specific hosts.\nFind nomad host branches that can be pruned because:\nReturn all <code>NomadRef</code>s grouped by host in sorted order.\nThe branch name part of a ref. <code>refs/head/master</code> would be …\nRepresents “where” a given branch comes from. This …\nA ref representing a branch managed by nomad.\nA remote git repository identified by name, like <code>origin</code>.\nA specialized container to represent nomad managed refs …\nRepresents “who” a given branch belongs to. This value …\nThe branch name.\nCheck whether the remote knows about a given <code>NomadRef</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>NomadRef</code> from a git ref in the local clone, …\nConstructs a <code>NomadRef</code> from a git ref in the remote, which …\nThe host this branch comes from.\nConvenient <code>From</code> implementations for <code>Cow&lt;&#39;_, str&gt;</code> based …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny additional internal data representing the underlying …\nA nomad ref in the remote. The remote may have many users …\nThe user this branch belongs to.\nAll commands will be displayed.\nHow much output to display about invoked commands.\nOnly print out the command line invocation (binary and …\nPrints what <code>Self::Invocation</code> would print and also any …\nOnly slow or otherwise important commands will be …\nWhat commands to display during workflow execution.\nShow a pretty spinner with a description.\nResponsible for timely communication of program state to …\nShow the version information for debugging.\nShow an internal representation of the workflow about to …\nMake some effort to build a decent error message for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the printed <code>stdout</code> from the <code>Output</code> of a <code>Command</code>.\nInvoke a <code>Command</code> and check its exit code for success.\nEverything.\nOnly the specified values.\nEverything except the specified values.\nDeclarative representation of a limited filter function.\nA boundary type that separates the CLI interface from high …\nImperatively execute the workflow.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all nomad managed refs organized by host.\nUse <code>clap_complete</code> to emit shell syntax for tab-completions\nDelete nomad managed refs returned by <code>to_prune</code>.\nSynchronize current local branches with nomad managed refs …")